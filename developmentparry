local Debug = false -- Set this to true if you want my debug output.
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
      local ballService = workspace:WaitForChild("Balls")
      local userInputService = game:GetService("UserInputService")
      local replicatedStorage = game:GetService("ReplicatedStorage")
      local runService = game:GetService("RunService")
      local stats = game:GetService("Stats")
      local workspaceStats = stats.Workspace
      local networkStats = stats.Network.ServerStatsItem
local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 9e9) -- A second argument in waitforchild what could it mean?
local Balls = workspace:WaitForChild("Balls", 9e9)

-- Functions

local function print(...) -- Debug print.
    if Debug then
        warn(...)
    end
end

local function VerifyBall(Ball) -- Returns nil if the ball isn't a valid projectile; true if it's the right ball.
    if typeof(Ball) == "Instance" and Ball:IsA("BasePart") and Ball:IsDescendantOf(Balls) and Ball:GetAttribute("realBall") == true then
        return true
    end
end

local function IsTarget() -- Returns true if we are the current target.
    return (Player.Character and Player.Character:FindFirstChild("Highlight"))
end

local function Parry() -- Parries.
    Remotes:WaitForChild("ParryButtonPress"):Fire()
end

      local function Parry2()
local args = {
[1] = 1.5,
[2] = CFrame.new(-282.66534423828125, 119.49650573730469, -178.448486328125) * CFrame.Angles(-0.26179957389831543, 0, -0),
[3] = {
 ["5116808496"] = Vector3.new(2009.55859375, -26.37396240234375, -40.442588806152344)
          },
[4] = {
[1] = 781,
[2] = 147
    }
}
           game:GetService("ReplicatedStorage").Remotes.ParryAttempt:FireServer(unpack(args))

local args = {
[1] = 1.5,
[2] = CFrame.new(-282.66534423828125, 119.49650573730469, -178.448486328125) * CFrame.Angles(-0.26179957389831543, 0, -0),
[3] = {
 ["5116798298"] = Vector3.new(1806.794189453125, 11.464569091796875, -73.22099304199219)
          },
[4] = {
[1] = 781,
[2] = 147
    }
}
           game:GetService("ReplicatedStorage").Remotes.ParryAttempt:FireServer(unpack(args))

local args = {
[1] = 1.5,
[2] = CFrame.new(-282.66534423828125, 119.49650573730469, -178.448486328125) * CFrame.Angles(-0.26179957389831543, 0, -0),
[3] = {
 ["2896054889"] = Vector3.new(640.41552734375, 111.19093322753906, 64.45394897460938)
          },
[4] = {
[1] = 781,
[2] = 147
    }
}
           game:GetService("ReplicatedStorage").Remotes.ParryAttempt:FireServer(unpack(args))

local args = {
[1] = 1.5,
[2] = CFrame.new(-282.66534423828125, 119.49650573730469, -178.448486328125) * CFrame.Angles(-0.26179957389831543, 0, -0),
[3] = {
 ["2896054889"] = Vector3.new(640.41552734375, 111.19093322753906, 64.45394897460938)
          },
[4] = {
[1] = 781,
[2] = 147
    }
}
           game:GetService("ReplicatedStorage").Remotes.ParryAttempt:FireServer(unpack(args))
      end

-- The actual code



Balls.ChildAdded:Connect(function(Ball)
    if not VerifyBall(Ball) then
        return
    end
    
    
    local OldPosition = Ball.Position
    local OldTick = tick()
    
    Ball:GetPropertyChangedSignal("Position"):Connect(function()
        if IsTarget() then -- No need to do the math if we're not being attacked.
            local Distance = (Ball.Position - workspace.CurrentCamera.Focus.Position).Magnitude
            local Velocity = (OldPosition - Ball.Position).Magnitude 
            
            
        
            if (Distance / Velocity) <= 18 then -- Sorry for the magic number. This just works. No, you don't get a slider for this because it's 2am.
                Parry()
            end
        end
        
        if (tick() - OldTick >= 0/60) then -- Don't want it to update too quickly because my velocity implementation is aids. Yes, I tried Ball.Velocity. No, it didn't work.
            OldTick = tick()
            OldPosition = Ball.Position
        end
    end)
end)

Balls.ChildAdded:Connect(function(Ball)
    if not VerifyBall(Ball) then
        return
    end
    
    print(`Ball Spawned: {Ball}`)
    
    local OldPosition = Ball.Position
    local OldTick = tick()
    
    Ball:GetPropertyChangedSignal("Position"):Connect(function()
        if IsTarget() then -- No need to do the math if we're not being attacked.
            local Distance = (Ball.Position - workspace.CurrentCamera.Focus.Position).Magnitude
            local Velocityx = (OldPosition - Ball.Position).Magnitude

            if (Distance / Velocityx) <= 6 then
              wait(1)
              Parry2()
              task.wait(0.2)
            end
        end
        
        if (tick() - OldTick >= 0/1) then -- Don't want it to update too quickly because my velocity implementation is aids. Yes, I tried Ball.Velocity. No, it didn't work.
            OldTick = tick()
            OldPosition = Ball.Position
        end
    end)
end)

Balls.ChildAdded:Connect(function(Ball)
    if not VerifyBall(Ball) then
        return
    end
    
    print(`Ball Spawned: {Ball}`)
    
    local OldPosition = Ball.Position
    local OldTick = tick()
    
    Ball:GetPropertyChangedSignal("Position"):Connect(function()
        if IsTarget() then
            local Distance = (Ball.Position - workspace.CurrentCamera.Focus.Position).Magnitude
            local Velocityz = (OldPosition - Ball.Position).Magnitude
        
            if (Distance / Velocityz) <= 2 then
              wait()
              Parry2()
              Parry()
            end
        end
        
        if (tick() - OldTick >= 0/80) then -- Don't want it to update too quickly because my velocity implementation is aids. Yes, I tried Ball.Velocity. No, it didn't work.
            OldTick = tick()
            OldPosition = Ball.Position
        end
    end)
end)
